/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions} from "web3-eth-contract";
import {EventLog} from "web3-core";
import {EventEmitter} from "events";
import {ContractEvent, Callback, TransactionObject, BlockType} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class Box extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): Box;
  methods: {
    increment(): TransactionObject<void>;

    initialize(sender: string): TransactionObject<void>;

    initializeBox(info: {name: string}, owner: string): TransactionObject<void>;

    isOwner(): TransactionObject<boolean>;

    name(): TransactionObject<string>;

    owner(): TransactionObject<string>;

    renounceOwnership(): TransactionObject<void>;

    retrieve(): TransactionObject<string>;

    store(newValue: number | string): TransactionObject<void>;

    transferOwnership(newOwner: string): TransactionObject<void>;
  };
  events: {
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    ValueChanged: ContractEvent<string>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
